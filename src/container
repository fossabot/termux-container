#!/data/data/com.termux/files/usr/bin/bash
# SPDX-License-Identifier: Apache-2.0
# This file is part of termux-container.
#
# Copyright (c) 2021-2023 Moe-hacker
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#         ●●●●● ●●●●● ●●●●  ●   ● ●   ● ●   ●
#           ●   ●     ●   ● ●● ●● ●   ●  ● ●
#           ●   ●●●●  ●●●●  ● ● ● ●   ●   ●
#           ●   ●     ●  ●  ●   ● ●   ●  ● ●
#           ●   ●●●●● ●   ● ●   ●  ●●●  ●   ●
#
#
#  ●●●   ●●●  ●   ● ●●●●●   ●    ●●●  ●   ● ●●●●● ●●●●
# ●   ● ●   ● ●●  ●   ●    ● ●    ●   ●●  ● ●     ●   ●
# ●     ●   ● ● ● ●   ●   ●   ●   ●   ● ● ● ●●●●  ●●●●
# ●   ● ●   ● ●  ●●   ●   ●●●●●   ●   ●  ●● ●     ●  ●
#  ●●●   ●●●  ●   ●   ●   ●   ●  ●●●  ●   ● ●●●●● ●   ●
#
# Version info.
# To be 9.5 now because I rewrote it twice since 8.0.
export TERMUX_CONTAINER_VERSION="9.5-dev"
export TERMUX_CONTAINER_LICENSE="Apache-2.0"
# Will be automatically set by Makefile.
export TERMUX_CONTAINER_COMMIT_ID=""
# Output main color.
RGB_COLOR="254;228;208"
export COLOR="\033[1;38;2;${RGB_COLOR}m"
# A very cute catgirl nya~~~
export CAT1="\n${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ Ｖ ﾉ|ﾉ
      ⠁⠁
"
export CAT2="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏  ^ ﾉ|ﾉ
      ⠁⠁
"
export CAT3="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ ぁ ﾉ|ﾉ
      ⠁⠁
"
export CAT4="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ の ﾉ|ﾉ
      ⠁⠁
"
export CAT5="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ ヮ ﾉ|ﾉ
      ⠁⠁
"
export CAT6="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ ++ ﾉ|ﾉ
      ⠁⠁
"
export CAT7="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ xx ﾉ|ﾉ
      ⠁⠁
"
export CAT8="${COLOR}  .^.   .^.
  /⋀\_ﾉ_/⋀\\
 /ﾉｿﾉ\ﾉｿ丶)|
|ﾙﾘﾘ >   )ﾘ
ﾉノ㇏ ひ ﾉ|ﾉ
      ⠁⠁
"
# Show error message and exit.
function error() {
  # Usage:
  # error "Error message"
  echo -e "\033[31m$@\033[0m" >&2
  printf "${COLOR}${CAT2}\033[0m" >&2
  echo -e "${COLOR}If you think something is wrong, please report at:\n\033[4mhttps://github.com/Moe-hacker/termux-container/discussions\033[0m" >&2
  exit 1
}
# Load configs && check the environment.
function _init() {
  # Usage:
  # _init
  if [[ ! -e /data/data/com.termux/files/usr/etc/container/global.conf ]]; then
    error "Could not find global config file!"
  fi
  source /data/data/com.termux/files/usr/etc/container/global.conf
  for i in capsh unshare chroot proot wget curl; do
    if ! command -v $i 2>&1 >/dev/null; then
      error "Missing dependencies: $i!"
    fi
  done
  if ! command -v ruri 2>&1 >/dev/null; then
    error "ruri not found, package might be broken!"
  fi
  if ! command -v container-console 2>&1 >/dev/null; then
    error "container-console not found, package might be broken!"
  fi
  kernelVersion="$(uname -r)"
  kernelMajor="${kernelVersion%%.*}"
  if ((kernelMajor < 4)); then
    echo -e "\033[33mWarning: termux-container has not been tested under linux 3.x or lower.\033[0m" >&2
  fi
}
# i18n.
function po_getmsg() {
  # Since termux does not support multiple languages,
  # the *.mo files seems not works.
  # So termux-container directly uses the *.po files
  # for translation.
  # NOTE:
  # This function only supports the *.po files created with --no-wrap option.
  # Usage:
  # po_getmsg "message"
  PO_FILE="$PREFIX/share/termux-container/lang/container-${TERMUX_CONTAINER_LANGUAGE}.po"
  if [[ ! -e ${PO_FILE} ]]; then
    printf "$@"
    return 1
  fi
  msg=$(grep -A 1 "\"$@\"" ${PO_FILE} | tail -1)
  if [[ ${msg} == "" ]]; then
    printf "$@"
    return 1
  fi
  msg=${msg#msgstr\ }
  msg=${msg#\"}
  msg=${msg%\"}
  printf "${msg}"
}
# Help page for container-console.
function console_help() {
  # Usage:
  # console_help
  # I hope you can understand...
  echo -e "${COLOR}$(po_getmsg "Usage:")"
  echo "  $(po_getmsg "help                       :Show this page.")"
  echo "  $(po_getmsg "exit                       :Exit console.")"
  echo "  $(po_getmsg "new                        :Create a new container.")"
  echo "  $(po_getmsg "search [all/OS] (Arch)     :Search for images.")"
  echo "  $(po_getmsg "pull [OS] [Version] (Arch) :Download image,just save.")"
  echo "  $(po_getmsg "rmi [OS] [Version] (Arch)  :Remove an image.")"
  echo "  $(po_getmsg "cp [Name:Path] [Path]      :Copy files,like docker cp.")"
  echo "  $(po_getmsg "ls                         :List containers and images.")"
  echo "  $(po_getmsg "rm [Name]                  :Remove a container.")"
  echo "  $(po_getmsg "login [Name]               :Login to the container.")"
  echo "  $(po_getmsg "import [Image File]        :Import an image.")"
  echo "  $(po_getmsg "export [Name]              :Export a container as an image.")"
  echo "  $(po_getmsg "info                       :Show version && system info.")"
}
# In fact it's very very very useless.
# But it's cool, isn't it?
function show_info() {
  # Usage:
  # show_info
  col=$(($(($(stty size | awk '{print $2}'))) / 2 - 25))
  logo="\033[1;38;2;254;228;208m
\033[${col}G         ●●●●● ●●●●● ●●●●  ●   ● ●   ● ●   ●
\033[${col}G           ●   ●     ●   ● ●● ●● ●   ●  ● ●
\033[${col}G           ●   ●●●●  ●●●●  ● ● ● ●   ●   ●
\033[${col}G           ●   ●     ●  ●  ●   ● ●   ●  ● ●
\033[${col}G           ●   ●●●●● ●   ● ●   ●  ●●●  ●   ●



\033[${col}G ●●●   ●●●  ●   ● ●●●●●   ●    ●●●  ●   ● ●●●●● ●●●●
\033[${col}G●   ● ●   ● ●●  ●   ●    ● ●    ●   ●●  ● ●     ●   ●
\033[${col}G●     ●   ● ● ● ●   ●   ●   ●   ●   ● ● ● ●●●●  ●●●●
\033[${col}G●   ● ●   ● ●  ●●   ●   ●●●●●   ●   ●  ●● ●     ●  ●
\033[${col}G ●●●   ●●●  ●   ●   ●   ●   ●  ●●●  ●   ● ●●●●● ●   ●
"
  printf "$logo"
  SIZE=$(stty size | awk '{print $2}')
  let SIZE=$(($SIZE - 5))
  echo "//"
  echo
  echo -e "\e[30;1;48;2;254;228;208;38;2;0;0;0mKM&KC$(yes " " | sed $SIZE'q' | tr -d '\n')\033[0m"
  echo
  echo -e "${COLOR}//"
  echo
  echo -e "\n$(po_getmsg "Script Info :")"
  echo
  echo -e "[\ueb11] $(po_getmsg "Activation Stat")       : Not Active"
  echo -e "[\ue729] $(po_getmsg "Commit ID")             : ${TERMUX_CONTAINER_COMMIT_ID}"
  echo -e "[\uf46b] $(po_getmsg "Author")                : Moe-hacker"
  echo -e "[\ue7c4] $(po_getmsg "License")               : ${TERMUX_CONTAINER_LICENSE}"
  echo -e "[\uf469] $(po_getmsg "Version")               : ${TERMUX_CONTAINER_VERSION}"
  echo -e "[\uf1d1] $(po_getmsg "ruri Version")          : $(ruri -V)"
  echo -e "[\ue78b] $(po_getmsg "ruri License")          : MIT"
  echo -e "[\ue796] $(po_getmsg "rootfstool Version")    : $(rootfstool version | head -1 | awk '{print $3}')"
  echo -e "[\ue7c4] $(po_getmsg "rootfstool License")    : Apache-2.0"
  # Learned from moby's check-config.sh.
  kernelVersion="$(uname -r)"
  kernelMajor="${kernelVersion%%.*}"
  kernelMinor="${kernelVersion#$kernelMajor.}"
  kernelMinor="${kernelMinor%%.*}"
  kernelPatch="${kernelVersion#*$kernelMinor.}"
  kernelPatch="${kernelPatch%%-*}"
  echo -e "\n$(po_getmsg "System Info") :"
  echo
  echo -e "[] $(po_getmsg "Kernel Version")        : $kernelMajor.$kernelMinor.$kernelPatch"
  if [[ ${TERMUX_VERSION} != "" ]]; then
    echo -e "[\ufcb5] $(po_getmsg "Termux Version")        : ${TERMUX_VERSION}"
  fi
  echo -e "[] $(po_getmsg "Username")              : $(whoami)"
  echo -e "[\ufc8e] $(po_getmsg "Android Version")       : $(getprop ro.build.version.release)"
  echo -e "[] $(po_getmsg "Cpu Architecture")      : $(uname -m)"
  echo -e "[] $(po_getmsg "Hostname")              : $(hostname)"
  echo -e "[] $(po_getmsg "Uptime")                : $(uptime -p)"
  su -c true 2>&1 >/dev/null && STAT="rooted" || STAT="not rooted"
  echo -e "[] $(po_getmsg "Device Stat")           : ${STAT}"
  for i in $(ls /proc/$$/ns | grep -v for_children); do
    NS+="$i "
  done
  echo -e "[\uf013] $(po_getmsg "Supported namespace")   : ${NS}"
  # XXX: `su -c` will not work properly with kernelSU.
  if [[ -e /bin/magisk ]]; then
    echo -e "[] $(po_getmsg "Magisk version")        : $(su -c /bin/magisk -V)"
    echo -e "[\ufc7e] $(po_getmsg "SELinux")               : $(sudo getenforce)"
  fi
  if [[ -e /data/adb/ksud ]]; then
    echo -e "[\uf639] $(po_getmsg "KernelSU version")      : $(sudo /data/adb/ksud -V)"
    echo -e "[\ufc7e] $(po_getmsg "SELinux")               : $(sudo getenforce)"
  fi
  echo -e "\n$(po_getmsg "Hardware Info") :"
  echo
  echo -e "[\uf493] $(po_getmsg "Brand")                 : $(getprop ro.product.brand)"
  echo -e "[\uf493] $(po_getmsg "Model")                 : $(getprop ro.product.model)"
  echo -e "[] $(po_getmsg "Model Codename")        : $(getprop ro.product.board)"
  echo -e "[] $(po_getmsg "Platform Codename")     : $(getprop ro.board.platform)"
  echo -e "[] $(po_getmsg "Cpus")                  : $(lscpu | grep CPU\(s\)\: | awk '{print $2}')"
  echo -e "[] $(po_getmsg "SOC Model")             : $(getprop ro.soc.model)"
  echo -e "[] $(po_getmsg "Total Memory")          : $(free -g --si | grep "Mem" | awk {'print $2'})GB"
  _temp=$(cat /sys/class/thermal/thermal_zone0/temp)
  temp=$((_temp / 1000))
  if ((temp > 37)); then
    logo=""
  else
    logo="\uf2dc"
  fi
  temp+=".$((_temp % 1000))"
  echo -e "[${logo}] $(po_getmsg "Temperature")           : ${temp}°C"
  echo
}
# Just like the command `docker cp`.
function container_cp() {
  # Usage: 
  # container_cp container_name:/path/in/container /path/in/host
  # container_cp /path/in/host container_name:/path/in/container
  # container_name should not include character `/`
  printf "${COLOR}"
  if [[ $1 == *:/* ]]; then
    CONTAINER_NAME=$(echo $1 | cut -d ":" -f 1)
    CONTAINER_PATH=$(echo $1 | cut -d ":" -f 2)
    HOST_PATH=$2
    CP_MODE=1
  else
    CONTAINER_NAME=$(echo $2 | cut -d ":" -f 1)
    CONTAINER_PATH=$(echo $2 | cut -d ":" -f 2)
    HOST_PATH=$1
    CP_MODE=2
  fi
  if [[ -e $PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf ]]; then
    source $PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf
    if [[ $CP_MODE == 1 ]]; then
      cp ${CONTAINER_DIR}${CONTAINER_PATH} ${HOST_PATH}
    else
      cp ${HOST_PATH} ${CONTAINER_DIR}${CONTAINER_PATH}
    fi
  elif [[ -e $PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf ]]; then
    source $PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf
    if [[ $CP_MODE == 1 ]]; then
      sudo cp ${CONTAINER_DIR}${CONTAINER_PATH} ${HOST_PATH}
    else
      sudo cp ${HOST_PATH} ${CONTAINER_DIR}${CONTAINER_PATH}
    fi
  else
    echo -e "\033[31m$(po_getmsg "Error: container does not exist !")${COLOR}"
    return
  fi
}
# Most of the code were rewritten to rootfstool.
function pull_rootfs() {
  # Usage:
  # pull_rootfs OS_DISTRO VERSION (CPU_ARCH)
  #TODO
  OS=$1
  VERSION=$2
  printf "${COLOR}"
  if [[ $3 = "" ]]; then
    get_cpu_arch
  else
    CPU_ARCH=$3
  fi
  if [[ -e $PREFIX/var/container/${OS}-${VERSION}-${CPU_ARCH}.tar.xz ]]; then
    echo -e "\033[31m$(po_getmsg "Error: Rootfs already exists !")${COLOR}"
    return 1
  fi
  if [[ $OS == "manjaro" ]]; then
    get_manjaro_rootfs
    return 0
  fi
}
# These code has been kept because I haven't added them to rootfstool.
function get_manjaro_rootfs() {
  # Usage:
  # get_manjaro_rootfs
  proot -0 rm -rf $PREFIX/tmp/container
  mkdir -p $PREFIX/tmp/container
  [[ -e $PREFIX/var/container ]] || mkdir -p $PREFIX/var/container
  cd $PREFIX/tmp/container
  wget https://osdn.net/projects/manjaro-arm/storage/.rootfs/Manjaro-ARM-aarch64-latest.tar.gz
  mkdir manjaro
  proot -0 -l tar -xvf Manjaro-ARM-aarch64-latest.tar.gz -C manjaro
  echo "Server = https://mirrors.bfsu.edu.cn/manjaro/arm-stable/\$repo/\$arch" >manjaro/etc/pacman.d/mirrorlist
  pacmanconf="
[options]
HoldPkg      = pacman glibc manjaro-system
SyncFirst    = manjaro-system manjaro-keyring manjaro-arm-keyring archlinux-keyring archlinuxarm-keyring
Architecture = aarch64


Color
ILoveCandy
CheckSpace

SigLevel    = Required DatabaseOptional
LocalFileSigLevel = Optional



[core]
SigLevel = Never
Include = /etc/pacman.d/mirrorlist

[extra]
SigLevel = Never
Include = /etc/pacman.d/mirrorlist

[community]
SigLevel = Never
Include = /etc/pacman.d/mirrorlist
"
  # Use proot for devices that are not rooted.
  printf "$pacmanconf" >manjaro/etc/pacman.conf
  rm manjaro/etc/resolv.conf
  echo nameserver 114.114.114.114 >manjaro/etc/resolv.conf
  echo "#!/bin/sh" >>manjaro/tmp/pacman-init.sh
  echo "PATH=\$PATH:\"/sbin:/bin:/usr/bin:/usr/local/bin\"" >>manjaro/tmp/pacman-init.sh
  echo "rm /etc/mtab&&echo / / > /etc/mtab" >>manjaro/tmp/pacman-init.sh
  echo "yes \"\"|pacman-key --init" >>manjaro/tmp/pacman-init.sh
  echo "yes \"\"|pacman -Syyu" >>manjaro/tmp/pacman-init.sh
  echo "rm /etc/mtab&&echo / / > /etc/mtab" >>manjaro/tmp/pacman-init.sh
  echo "yes \"\"|pacman -Syy base base-devel" >>manjaro/tmp/pacman-init.sh
  chmod 777 manjaro/tmp/pacman-init.sh
  COMMAND="proot"
  COMMAND+=" --link2symlink"
  COMMAND+=" --kill-on-exit"
  COMMAND+=" --sysvipc"
  COMMAND+=" -0"
  COMMAND+=" -r $PREFIX/tmp/container/manjaro"
  COMMAND+=" -b /dev"
  COMMAND+=" -b /sys"
  COMMAND+=" -b /proc"
  COMMAND+=" -w /root"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/buddyinfo:/proc/buddyinfo"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/cgroups:/proc/cgroups"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/consoles:/proc/consoles"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/crypto:/proc/crypto"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/devices:/proc/devices"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/diskstats:/proc/diskstats"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/execdomains:/proc/execdomains"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/fb:/proc/fb"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/filesystems:/proc/filesystems"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/interrupts:/proc/interrupts"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/iomem:/proc/iomem"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/ioports:/proc/ioports"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/kallsyms:/proc/kallsyms"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/key-users:/proc/key-users"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/keys:/proc/keys"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/kpageflags:/proc/kpageflags"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/loadavg:/proc/loadavg"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/locks:/proc/locks"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/misc:/proc/misc"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/modules:/proc/modules"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/pagetypeinfo:/proc/pagetypeinfo"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/partitions:/proc/partitions"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/sched_debug:/proc/sched_debug"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/softirqs:/proc/softirqs"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/stat:/proc/stat"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/timer_list:/proc/timer_list"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/uptime:/proc/uptime"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/version:/proc/version"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/vmallocinfo:/proc/vmallocinfo"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/vmstat:/proc/vmstat"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/zoneinfo:/proc/zoneinfo"
  COMMAND+=" --mount=$PREFIX/tmp:/tmp"
  COMMAND+="/bin/sh /tmp/pacman-init.sh"
  unset LD_PRELOAD
  ${COMMAND}
  cd manjaro
  proot -0 -l tar -cvJf ../rootfs.tar.xz .
  mv ../rootfs.tar.xz $PREFIX/var/container/manjaro-current-arm64.tar.xz
  cd ~
  proot -0 rm -rf $PREFIX/tmp/container
}
# From Tmoe.
# In fact I don't think that there are any phones with amd64 CPUS and Android system now.
function get_cpu_arch() {
  # Usage:
  # get_cpu_arch
  # It will create a global variable ${CPU_ARCH}
  DPKG_ARCH=$(dpkg --print-architecture)
  case ${DPKG_ARCH} in
  armel) export CPU_ARCH="armel" ;;
  armv7* | armv8l | armhf | arm) export CPU_ARCH="armhf" ;;
  aarch64 | arm64* | armv8* | arm*) export CPU_ARCH="arm64" ;;
  i*86 | x86) export CPU_ARCH="i386" ;;
  x86_64 | amd64) export CPU_ARCH="amd64" ;;
  *) echo -e "\033[31m$(po_getmsg "Unknow cpu architecture for this device !")\033[0m" && exit 1 ;;
  esac
}
# Just like `docker rmi`?
function remove_image() {
  # Usage:
  # remove_image OS_DISTRO VERSION (CPU_ARCH)
  OS=$1
  VERSION=$2
  CPU_ARCH=$3
  if [[ ${CPU_ARCH} == "" ]]; then
    get_cpu_arch
  fi
  if [[ -e $PREFIX/var/container/${OS}-${VERSION}-${CPU_ARCH}.tar.xz ]]; then
    rm -fv $PREFIX/var/container/${OS}-${VERSION}-${CPU_ARCH}.tar.xz
  else
    echo -e "\033[31m$(po_getmsg "Error: Rootfs does not exist !")${COLOR}"
  fi
}
# Unpack the rootfs and fix bugs on Android.
function create_chroot_container() {
  ROOTFS=$1
  CONTAINER_DIR=$2
  NEW_USER=$3
  PASSWORD=$4
  printf "${COLOR}"
  if ! mkdir -p ${CONTAINER_DIR}; then
    echo -e "\033[31m$(po_getmsg "Error: Failed to create container directory !")${COLOR}"
    return 1
  fi
  pv $PREFIX/var/container/$ROOTFS | tar -xJf - -C ${CONTAINER_DIR}
  # Fix permission of /bin/su
  chown root:root ${CONTAINER_DIR}/bin/su
  chmod 777 ${CONTAINER_DIR}/bin/su
  # Create mountpoints.
  [[ -e ${CONTAINER_DIR}/dev ]] || mkdir ${CONTAINER_DIR}/dev
  [[ -e ${CONTAINER_DIR}/proc ]] || mkdir ${CONTAINER_DIR}/proc
  [[ -e ${CONTAINER_DIR}/sys ]] || mkdir ${CONTAINER_DIR}/sys
  [[ -e ${CONTAINER_DIR}/sdcard ]] || mkdir ${CONTAINER_DIR}/sdcard
  # Fix dns problem.
  rm -f ${CONTAINER_DIR}/etc/resolv.conf >>/dev/null 2>&1
  echo nameserver 8.8.8.8 >>${CONTAINER_DIR}/etc/resolv.conf
  echo nameserver 114.114.114.114 >>${CONTAINER_DIR}/etc/resolv.conf
  # Fix network problem.
  cp $PREFIX/share/termux-container/group_add.sh ${CONTAINER_DIR}/tmp
  chmod 777 ${CONTAINER_DIR}/tmp/group_add.sh
  if [[ ${NEW_USER} != "" && ${PASSWORD} != "" ]]; then
    sed -i "s/NEW_USER=\"\"/NEW_USER=${NEW_USER}/" ${CONTAINER_DIR}/tmp/group_add.sh
    sed -i "s/PASSWORD=\"\"/PASSWORD=${PASSWORD}/" ${CONTAINER_DIR}/tmp/group_add.sh
  fi
  mount -t proc proc ${CONTAINER_DIR}/proc/
  mount --rbind /dev ${CONTAINER_DIR}/dev/
  mount --rbind /sys ${CONTAINER_DIR}/sys/
  unset LD_PRELOAD
  $PREFIX/bin/chroot ${CONTAINER_DIR} /tmp/group_add.sh >>/dev/null 2>&1
  umount -lvf ${CONTAINER_DIR}/dev >>/dev/null 2>&1
  umount -lvf ${CONTAINER_DIR}/sys >>/dev/null 2>&1
  umount -lvf ${CONTAINER_DIR}/proc >>/dev/null 2>&1
  umount -lvf ${CONTAINER_DIR} >>/dev/null 2>&1
  printf "${CAT1}\n"
  echo -e "$(po_getmsg "Creation done.")\n"
}
# Just like above.
function create_proot_container() {
  ROOTFS=$1
  CONTAINER_DIR=$2
  CROSS_ARCH=$3
  NEW_USER=$4
  PASSWORD=$5
  printf "${COLOR}"
  if ! mkdir -p ${CONTAINER_DIR}; then
    echo -e "\033[31m$(po_getmsg "Failed to create container directory !")${COLOR}"
    return 1
  fi
  pv $PREFIX/var/container/$ROOTFS | proot -0 -l tar -xJf - -C ${CONTAINER_DIR}
  [[ -e ${CONTAINER_DIR}/dev ]] || mkdir ${CONTAINER_DIR}/dev
  [[ -e ${CONTAINER_DIR}/proc ]] || mkdir ${CONTAINER_DIR}/proc
  [[ -e ${CONTAINER_DIR}/sys ]] || mkdir ${CONTAINER_DIR}/sys
  [[ -e ${CONTAINER_DIR}/sdcard ]] || mkdir ${CONTAINER_DIR}/sdcard
  rm -f ${CONTAINER_DIR}/etc/resolv.conf >>/dev/null 2>&1
  echo nameserver 8.8.8.8 >>${CONTAINER_DIR}/etc/resolv.conf
  echo nameserver 114.114.114.114 >>${CONTAINER_DIR}/etc/resolv.conf
  cp $PREFIX/share/termux-container/group_add.sh ${CONTAINER_DIR}/tmp/
  chmod 777 ${CONTAINER_DIR}/tmp/group_add.sh
  if [[ ${NEW_USER} != "" && ${PASSWORD} != "" ]]; then
    sed -i "s/NEW_USER=\"\"/NEW_USER=${NEW_USER}/" ${CONTAINER_DIR}/tmp/group_add.sh
    sed -i "s/PASSWORD=\"\"/PASSWORD=${PASSWORD}/" ${CONTAINER_DIR}/tmp/group_add.sh
  fi
  unset LD_PRELOAD
  COMMAND="proot --link2symlink --sysvipc -0 -r ${CONTAINER_DIR} -b /dev -b /sys -b /proc -w /root"
  if [[ ${CROSS_ARCH} != "null" ]]; then
    COMMAND+=" -q qemu-${CROSS_ARCH}"
  fi
  ${COMMAND} /tmp/group_add.sh >>/dev/null 2>&1
  printf "${CAT1}\n"
  echo -e "$(po_getmsg "Creation done.")\n"
}
#XXX
function init_chroot_container() {
  mount -o remount,suid /data
  mount --rbind ${CONTAINER_DIR} ${CONTAINER_DIR}
  mount -o ro,bind /sdcard ${CONTAINER_DIR}/sdcard/
  if [[ ! -e /dev/fd ]]; then
    ln -s /proc/self/fd /dev/ >>/dev/null 2>&1
  fi
  if [[ ! -e /dev/stdin ]]; then
    ln -s /proc/self/fd/0 /dev/stdin >>/dev/null 2>&1
  fi
  if [[ ! -e /dev/stdout ]]; then
    ln -s /proc/self/fd/1 /dev/stdout >>/dev/null 2>&1
  fi
  if [[ ! -e /dev/stderr ]]; then
    ln -s /proc/self/fd/2 /dev/stderr >>/dev/null 2>&1
  fi
  if [[ ! -e /dev/tty0 ]]; then
    ln -s /dev/null /dev/tty0 >>/dev/null 2>&1
  fi
  if [[ ! -e "/dev/net/tun" ]]; then
    [[ -d /dev/net ]] || mkdir -p /dev/net >>/dev/null 2>&1
    mknod /dev/net/tun c 10 200 >>/dev/null 2>&1
  fi
  if [[ ! -e /dev/shm ]]; then
    mkdir -p /dev/shm >>/dev/null 2>&1
    mount -o rw,nosuid,nodev,mode=1777 -t tmpfs tmpfs /dev/shm >>/dev/null 2>&1
  fi
  if ! mountpoint -q ${CONTAINER_DIR}/proc; then
    mount --bind /proc ${CONTAINER_DIR}/proc >>/dev/null 2>&1
  fi
  if ! mountpoint -q ${CONTAINER_DIR}/sys; then
    mount --bind /sys ${CONTAINER_DIR}/sys >>/dev/null 2>&1
  fi
  if ! mountpoint -q ${CONTAINER_DIR}/dev; then
    mount --bind /dev ${CONTAINER_DIR}/dev >>/dev/null 2>&1
  fi
  if ! mountpoint -q ${CONTAINER_DIR}/dev/shm; then
    mount -o bind /dev/shm ${CONTAINER_DIR}/dev/shm >>/dev/null 2>&1
  fi
  if ! mountpoint -q ${CONTAINER_DIR}/dev/pts; then
    mount -o bind /dev/pts ${CONTAINER_DIR}/dev/pts >>/dev/null 2>&1
  fi
}
function run_unshare_container() {
  return
}
function run_capsh_container() {
  #unshare -u -p -m -i capsh --chroot=~/x --shell=/bin/su --
  return
}
function run_rootful_container() {
  return
}
function run_ruri_container() {
  if [[ ! -e $PREFIX/bin/ruri ]]; then
    echo -e "\033[31m$(po_getmsg "Error: Can not find ruri installed !")${COLOR}"
    return 1
  fi
  CONTAINER_NAME=$1
  if [[ ! -e $PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf ]]; then
    echo -e "\033[31m$(po_getmsg "Error: Container does not exist !")${COLOR}"
    return 1
  fi
  source $PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf
  if [[ ${BE_SILENT} != 'true' ]]; then
    kernelVersion="$(uname -r)"
    kernelMajor="${kernelVersion%%.*}"
    kernelMinor="${kernelVersion#$kernelMajor.}"
    kernelMinor="${kernelMinor%%.*}"
    kernelPatch="${kernelVersion#*$kernelMinor.}"
    kernelPatch="${kernelPatch%%-*}"
    SELINUX=$(getenforce)
    HOSTNAME=$(hostname)
    ANDROID=$(getprop ro.build.version.release)
    TIME=$(date | awk '{print $4}')
    clear
    printf "${COLOR}"
    echo -e ""
    echo -e "//"
    echo -e ""
    LINE=$(($(stty size | awk '{print $2}')))
    LINE=$(($LINE - 16))
    echo -e "\e[30;1;48;2;254;228;208;38;2;0;0;0mTERMUX-CONTAINER$(yes " " | sed ${LINE}'q' | tr -d '\n')\033[0m"
    echo -e "${COLOR}"
    echo -e "//"
    echo -e ""
    echo -e "    _________      [] CONTAINER: ${CONTAINER_NAME}"
    echo -e "   /        /\\     [] ARCH: $(uname -m)"
    echo -e "  /        /  \\    [] SELINUX: ${SELINUX}"
    echo -e " /        /    \\   [] KERNEL VERSION: $kernelMajor.$kernelMinor.$kernelPatch"
    echo -e "/________/      \\  [] TIME: ${TIME}"
    echo -e "\\        \\      /  [] HOSTNAME: ${HOSTNAME}"
    echo -e " \\        \\    /   [] ANDROID VERSION: ${ANDROID}"
    echo -e "  \\        \\  /    [] CONTAINER DIR: $(echo ${CONTAINER_DIR} | sed 's#/data/data/com.termux/files/home#$HOME#' | sed 's#/data/data/com.termux/files/usr#$PREFIX#')"
    echo -e "   \\________\\/     [] PRIVAGE LEVEL: ${PRIVAGE_LEVEL}"
    echo -e ""
    echo -e "〉TERMUX-CONTAINER"
    LINE=$(($(stty size | awk '{print $2}')))
    echo -e "$(yes "─" | sed ${LINE}'q' | tr -d '\n')"
    echo -e "//////"
    echo -e ""
  fi
  if [[ ! -e ${CONTAINER_DIR} ]]; then
    echo -e "\033[31m$(po_getmsg "Error: Container directory does not exist !")${COLOR}"
    return 1
  fi
  [[ -e ${CONTAINER_DIR}/sdcard ]] || mkdir -p ${CONTAINER_DIR}/sdcard
  if [[ ${MOUNT_SDCARD} == "true" ]]; then
    mount --bind -o ro /sdcard ${CONTAINER_DIR}/sdcard
  fi
  # Mount termux's tmpdir.
  mount --bind ${PREFIX}/tmp ${CONTAINER_DIR}/tmp
  # Fix nosuid error of sudo.
  mount -o remount,suid /data >>/dev/null 2>&1
  CONTAINER_PARAMETER="-w"
  if [[ ${ENABLE_UNSHARE} == "true" ]]; then
    # Run rurid if it's not running.
    if ! ruri -w -t; then
      ruri -D
    fi
    CONTAINER_PARAMETER+=" -u"
  fi
  if [[ ${PRIVAGE_LEVEL} == "0" ]]; then
    CONTAINER_PARAMETER+=" -d"
  elif [[ ${PRIVAGE_LEVEL} == "2" ]]; then
    CONTAINER_PARAMETER+=" -p"
  fi
  printf "\033[0m"
  unset LD_PRELOAD
  # Use ruri instead of chroot/unshare command.
  ruri ${CONTAINER_PARAMETER} ${CONTAINER_DIR}
}
function run_proot_container() {
  CONTAINER_NAME=$1
  if [[ ! -e $PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf ]]; then
    echo -e "\033[31m$(po_getmsg "Error: Container does not exist !")${COLOR}"
    return 1
  fi
  source $PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf
  if [[ ${BE_SILENT} != 'true' ]]; then
    kernelVersion="$(uname -r)"
    kernelMajor="${kernelVersion%%.*}"
    kernelMinor="${kernelVersion#$kernelMajor.}"
    kernelMinor="${kernelMinor%%.*}"
    kernelPatch="${kernelVersion#*$kernelMinor.}"
    kernelPatch="${kernelPatch%%-*}"
    clear
    printf "${COLOR}"
    echo -e ""
    echo -e "//"
    echo -e ""
    LINE=$(($(stty size | awk '{print $2}')))
    LINE=$(($LINE - 16))
    echo -e "\e[30;1;48;2;254;228;208;38;2;0;0;0mTERMUX-CONTAINER$(yes " " | sed ${LINE}'q' | tr -d '\n')\033[0m"
    echo -e "${COLOR}"
    echo -e "//"
    echo -e ""
    echo -e "    _________      [] CONTAINER: ${CONTAINER_NAME}"
    echo -e "   /        /\\     [] ARCH: $(uname -m)"
    echo -e "  /        /  \\    [] CROSS-ARCH: ${CROSS_ARCH}"
    echo -e " /        /    \\   [] KERNEL: $kernelMajor.$kernelMinor.$kernelPatch"
    echo -e "/________/      \\  [] TIME: $(date | awk '{print $4}')"
    echo -e "\\        \\      /  [] HOSTNAME: $(hostname)"
    echo -e " \\        \\    /   [] ANDROID: $(getprop ro.build.version.release)"
    echo -e "  \\        \\  /    [] CONTAINER_DIR: $(echo ${CONTAINER_DIR} | sed 's#/data/data/com.termux/files/home#$HOME#' | sed 's#/data/data/com.termux/files/usr#$PREFIX#')"
    echo -e "   \\________\\/     [] VERSION: 9.0-dev"
    echo -e ""
    echo -e "〉TERMUX-CONTAINER"
    LINE=$(($(stty size | awk '{print $2}')))
    echo -e "$(yes "─" | sed ${LINE}'q' | tr -d '\n')"
    echo -e "//////"
    echo -e ""
  fi
  if [[ ! -e ${CONTAINER_DIR} ]]; then
    echo -e "\033[31m$(po_getmsg "Error: Container directory does not exist !")${COLOR}"
    return 1
  fi
  unset LD_PRELOAD
  COMMAND="proot"
  COMMAND+=" --link2symlink"
  COMMAND+=" --kill-on-exit"
  COMMAND+=" --sysvipc"
  COMMAND+=" -0"
  COMMAND+=" -r ${CONTAINER_DIR}"
  COMMAND+=" -b /dev"
  COMMAND+=" -b /sys"
  COMMAND+=" -b /proc"
  COMMAND+=" -w /root"
  if [[ ${MOUNT_SDCARD} = "true" ]]; then
    COMMAND+=" -b /sdcard"
  fi
  if [[ ${CROSS_ARCH} != "null" ]]; then
    COMMAND+=" -q qemu-${CROSS_ARCH}"
  fi
  # From Redmi 10X 5G, I hope it works.
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/buddyinfo:/proc/buddyinfo"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/cgroups:/proc/cgroups"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/consoles:/proc/consoles"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/crypto:/proc/crypto"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/devices:/proc/devices"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/diskstats:/proc/diskstats"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/execdomains:/proc/execdomains"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/fb:/proc/fb"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/filesystems:/proc/filesystems"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/interrupts:/proc/interrupts"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/iomem:/proc/iomem"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/ioports:/proc/ioports"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/kallsyms:/proc/kallsyms"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/key-users:/proc/key-users"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/keys:/proc/keys"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/kpageflags:/proc/kpageflags"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/loadavg:/proc/loadavg"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/locks:/proc/locks"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/misc:/proc/misc"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/modules:/proc/modules"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/pagetypeinfo:/proc/pagetypeinfo"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/partitions:/proc/partitions"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/sched_debug:/proc/sched_debug"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/softirqs:/proc/softirqs"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/stat:/proc/stat"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/timer_list:/proc/timer_list"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/uptime:/proc/uptime"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/version:/proc/version"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/vmallocinfo:/proc/vmallocinfo"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/vmstat:/proc/vmstat"
  COMMAND+=" --mount=$PREFIX/share/termux-container/proc/zoneinfo:/proc/zoneinfo"
  # Mount termux's tmpdir.
  COMMAND+=" --mount=$PREFIX/tmp:/tmp"
  COMMAND+=" /bin/su - root"
  printf "\033[0m"
  ${COMMAND}
}
# Just call to other functions.
function run_container() {
  CONTAINER_NAME=$1
  if [[ -e $PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf ]]; then
    RUN_PROOT_CONTAINER ${CONTAINER_NAME}
  elif [[ -e $PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf ]]; then
    if [[ $(whoami) != "root" ]]; then
      sudo container -e RUN_CHROOT_CONTAINER ${CONTAINER_NAME}
      return
    fi
  else
    echo -e "\033[31m$(po_getmsg "Error: container does not exist !")${COLOR}"
    return
  fi
}
function create_new_container() {
  # XXX
  x="
┏━━━━━━━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━┳━━━━━━━━━┳━━━━━━━━
┃ container backend  ┃       ┃      ┃               ┃       ┃         ┃
┠────────────────────┨ proot ┃ ruri ┃ capsh+unshare ┃ capsh ┃ unshare ┃ chroot 
┃ supported feature  ┃       ┃      ┃               ┃       ┃         ┃
┣━━━━━━━━━━━━━━━━━━━━╋━━━━━━━╋━━━━━━╋━━━━━━━━━━━━━━━╋━━━━━━━╋━━━━━━━━━╋━━━━━━━━
┃     rootless       ┃   ◯   ┃   X  ┃       X       ┃   X   ┃    X    ┃   X
┣━━━━━━━━━━━━━━━━━━━━╋━━━━━━━╋━━━━━━╋━━━━━━━━━━━━━━━╋━━━━━━━╋━━━━━━━━━╋━━━━━━━━
┃ namespace support  ┃   X   ┃   ◯  ┃       ◯*      ┃   X   ┃    ◯*   ┃   X
┣━━━━━━━━━━━━━━━━━━━━╋━━━━━━━╋━━━━━━╋━━━━━━━━━━━━━━━╋━━━━━━━╋━━━━━━━━━╋━━━━━━━━
┃ capability control ┃   X   ┃   ◯  ┃       ◯       ┃   ◯   ┃    X    ┃   X

*capsh+unshare/unshare will not keep the same container running in the same namspaces.
  "
  #XXX
  GET_CPU_ARCH
  echo
  echo -e "${COLOR}$(po_getmsg "Enter the name of this container.")"
  while :; do
    read -p "[] $(po_getmsg "Name > ")" CONTAINER_NAME
    if [[ $? != 0 ]]; then
      echo
      return 1
    fi
    if [[ ${CONTAINER_NAME} != "" ]]; then
      if [[ ! -e $PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf ]] && [[ ! -e $PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf ]]; then
        echo
        break
      else
        echo -e "\033[31m$(po_getmsg "Error: container name already in use !")${COLOR}"
      fi
    fi
  done
  echo -e "$(po_getmsg "If your phone is rooted,it is recommand to run container with chroot mode.If not or you want to run cross-arch container,please choose proot.")"
  echo -e "$(po_getmsg "Chroot mode will use ruri for unshare feature and capability reduse to make the container more secure,see:\n\033[4mhttps://github.com/Moe-hacker/ruri\033[0m${COLOR}")"
  echo -e "$(po_getmsg "Before you use it,you should allow the MIT License of it:\n\033[4mhttps://github.com/Moe-hacker/ruri/blob/main/LICENSE\033[0m${COLOR}")"
  echo -e "\n$(po_getmsg "Enter the type of this container.")"
  while :; do
    read -p "[] $(po_getmsg "Type [chroot/proot] > ")" CONTAINER_TYPE
    if [[ $? != 0 ]]; then
      echo
      return 1
    fi
    if [[ ${CONTAINER_TYPE} == "chroot" ]] || [[ ${CONTAINER_TYPE} == "proot" ]]; then
      break
    fi
  done
  if [[ ${CONTAINER_TYPE} == "chroot" ]]; then
    echo -e "\n$(po_getmsg "Unshare mode will use namespace features of Linux kernel to provide more security,but some devices may crash after using it.")\n"
    while :; do
      read -p "[] $(po_getmsg "Enable unshare [true/false] > ")" ENABLE_UNSHARE
      if [[ $? != 0 ]]; then
        echo
        return 1
      fi
      if [[ ${ENABLE_UNSHARE} == "true" ]] || [[ ${ENABLE_UNSHARE} == "false" ]]; then
        break
      fi
    done
    echo -e "\n$(po_getmsg "The privilege level determines the privileges that the container can get. 0 is the lowest and 2 is the highest.Lower privileges can make the container more secure,but operations like mount will not be authorized in the container.It's recommended to set it to 1.")\n"
    while :; do
      read -p "[] $(po_getmsg "Privilege level [0-2] > ")" PRIVAGE_LEVEL
      if [[ $? != 0 ]]; then
        echo
        return 1
      fi
      if [[ ${PRIVAGE_LEVEL} == "0" ]] || [[ ${PRIVAGE_LEVEL} == "1" ]] || [[ ${PRIVAGE_LEVEL} == "2" ]]; then
        break
      fi
    done
  else
    echo -e "\n$(po_getmsg "You can use qemu to simulate another CPU architecture to run containers,however,the performance is not ideal.")"
    echo -e "$(po_getmsg "Available CPU architectures are:") arm64 armhf amd64 i386 m68k ppc ppc64el riscv32 riscv64"
    echo -e "$(po_getmsg "If you don't want to use qemu,just press Enter here.")\n"
    while :; do
      read -p "[] $(po_getmsg "CPU architecture") > " CPU_ARCH
      if [[ $? != 0 ]]; then
        echo
        return 1
      fi
      case ${CPU_ARCH} in
      "i386" | "m68k" | "ppc" | "riscv32" | "riscv64")
        export CPU_ARCH=${CROSS_ARCH} && apt install qemu-user-${CROSS_ARCH}
        break
        ;;
      "arm64")
        export CROSS_ARCH=aarch64 && apt install qemu-user-${CROSS_ARCH}
        break
        ;;
      "armhf")
        export CROSS_ARCH=arm && apt install qemu-user-${CROSS_ARCH}
        break
        ;;
      "amd64")
        export CROSS_ARCH=x86_64 && apt install qemu-user-x86-64
        break
        ;;
      "ppc64el")
        export CROSS_ARCH=ppc64 && apt install qemu-user-${CROSS_ARCH}
        break
        ;;
      "") GET_CPU_ARCH && export CROSS_ARCH=null && break ;;
      esac
    done
  fi
  echo -e "\n$(po_getmsg "You can mount /sdcard to the container to share files in your phone.However,it's not a secure way.It's recommended to use \`container cp\` instead.")\n"
  while :; do
    read -p "[] $(po_getmsg "Mount sdcard [true/false]") > " MOUNT_SDCARD
    if [[ $? != 0 ]]; then
      echo
      return 1
    fi
    if [[ ${MOUNT_SDCARD} == "true" ]] || [[ ${MOUNT_SDCARD} == "false" ]]; then
      break
    fi
  done
  echo -e "\n$(po_getmsg "You can create a new common user in the container.If you don't want it,just press Enter here.")\n"
  while :; do
    read -p "[] $(po_getmsg "Username") > " NEW_USER
    if [[ $? != 0 ]]; then
      echo
      return 1
    fi
    break
  done
  if [[ ${NEW_USER} != "" ]]; then
    while :; do
      read -p "[] $(po_getmsg "Password") > " PASSWORD
      if [[ $? != 0 ]]; then
        echo
        return 1
      fi
      if [[ ${PASSWORD} != "" ]]; then
        break
      fi
    done
  fi
  echo -e "\n$(po_getmsg "The container absolute path is the directory used to store the container,for chroot,you can use /data/container-name,and for proot,you can use /data/data/com.termux/files/home/container-name,but do not use directory in /sdcard,or you might run into problems !")\n"
  echo -e "$(po_getmsg "Enter the absolute path of container.")"
  while :; do
    read -p "[] $(po_getmsg "Container path") > " CONTAINER_DIR
    if [[ $? != 0 ]]; then
      echo
      return 1
    fi
    if [[ -e ${CONTAINER_DIR} ]]; then
      echo -e "\033[31m$(po_getmsg "Error: container directory already exist !")${COLOR}"
      continue
    fi
    for BLACKLIST in {/bin/,/dev/,/odm/,/oem/,/proc/,/product/,/sys/,/system/,/vendor/}; do
      if [[ ${CONTAINER_DIR} = $BLACKLIST* ]]; then
        echo -e "\033[31m$(po_getmsg "Error: refuse to use system directory !")${COLOR}"
        CONTINUE=true
      fi
    done
    if [[ ${CONTINUE} == "true" ]]; then
      continue
    fi
    if [[ ${CONTAINER_DIR:0:1} != "/" ]]; then
      echo -e "\033[31m$(po_getmsg "Error: please use absolute path !")${COLOR}"
      continue
    else
      break
    fi
  done
  echo -e "\n$(po_getmsg "Choose the OS and the version to install,you can use \`search\` command here.")"
  while :; do
    read -p "[] $(po_getmsg "OS") > " OS
    if [[ $? != 0 ]]; then
      echo
      return 1
    fi
    if [[ $(echo $OS | awk '{print $1}') == search ]]; then
      SEARCH_IMAGES $(echo $OS | awk '{print $2}') $CPU_ARCH
      printf "${COLOR}"
      continue
    fi
    if [[ ${OS} != "" ]]; then
      while :; do
        printf "${COLOR}"
        read -p "[] $(po_getmsg "Vesion") > " VERSION
        if [[ $? != 0 ]]; then
          echo
          return 1
        fi
        if [[ ${VERSION} != "" ]]; then
          if [[ ! -e $PREFIX/var/container/${OS}-${VERSION}-${CPU_ARCH}.tar.xz ]]; then
            PULL_ROOTFS ${OS} ${VERSION} ${CPU_ARCH} && break
          else
            break
          fi
        fi
      done
      break
    fi
  done
  echo -e "$(po_getmsg "Before creating the container,you need to make sure the config is all right:")"
  if [[ ${CONTAINER_TYPE} == "chroot" ]]; then
    echo -e "$(po_getmsg "Type")            : chroot"
    echo -e "$(po_getmsg "Enable unshare")  : ${ENABLE_UNSHARE}"
    echo -e "$(po_getmsg "Privilege level") : ${PRIVAGE_LEVEL}"
  else
    echo -e "$(po_getmsg "Type")            : proot"
    echo -e "$(po_getmsg "Cross-arch")      : ${CROSS_ARCH}"
  fi
  echo -e "$(po_getmsg "Name")            : ${CONTAINER_NAME}"
  echo -e "$(po_getmsg "Container path")  : ${CONTAINER_DIR}"
  echo -e "$(po_getmsg "New user")        : ${NEW_USER}"
  echo -e "$(po_getmsg "Password")        : ${PASSWORD}"
  echo -e "$(po_getmsg "OS")              : ${OS}"
  echo -e "$(po_getmsg "Version")         : ${VERSION}"
  echo -e "$(po_getmsg "Mount sdcard")    : ${MOUNT_SDCARD}"
  read -p "$(po_getmsg "Continue") [y/n] " CONTINUE
  if [[ ${CONTINUE} == "n" ]]; then
    return 1
  fi
  if [[ ${CONTAINER_TYPE} == "chroot" ]]; then
    sudo container -e CREATE_CHROOT_CONTAINER ${OS}-${VERSION}-${CPU_ARCH}.tar.xz ${CONTAINER_DIR} ${NEW_USER} ${PASSWORD}
    [[ -e $PREFIX/etc/container/chroot ]] || mkdir -p $PREFIX/etc/container/chroot
    echo -e "#This file was automatically created by termux-container.\n#Do not edit this file if you don't know what you are doing !" >>$PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf
    echo -e "OS=${OS}\nCONTAINER_DIR=${CONTAINER_DIR}\nENABLE_UNSHARE=${ENABLE_UNSHARE}\nPRIVAGE_LEVEL=${PRIVAGE_LEVEL}\nCROSS_ARCH=null\nMOUNT_SDCARD=${MOUNT_SDCARD}" >>$PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf
  else
    export CROSSARCH=${CROSS_ARCH}
    CREATE_PROOT_CONTAINER ${OS}-${VERSION}-${CPU_ARCH}.tar.xz ${CONTAINER_DIR} ${CROSS_ARCH} ${NEW_USER} ${PASSWORD}
    [[ -e $PREFIX/etc/container/proot ]] || mkdir -p $PREFIX/etc/container/proot
    echo -e "#This file was automatically created by termux-container.\n#Do not edit this file if you don't know what you are doing !" >>$PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf
    echo -e "OS=${OS}\nCONTAINER_DIR=${CONTAINER_DIR}\nCROSS_ARCH=${CROSSARCH}\nMOUNT_SDCARD=${MOUNT_SDCARD}" >>$PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf
  fi
}
function container_list() {
  echo
  echo -e "${COLOR}$(po_getmsg "Images:")"
  echo -e "$(po_getmsg "OS:Version:Arch")"
  echo -e "================"
  if [[ -e $PREFIX/var/container ]]; then
    for IMAGE in $(ls $PREFIX/var/container); do
      OS=${IMAGE%%-*}
      VERSION=${IMAGE#$OS-}
      VERSION=${VERSION%-*}
      CPU_ARCH=${IMAGE#*$VERSION-}
      CPU_ARCH=${CPU_ARCH%%.*}
      echo "$OS:$VERSION:$CPU_ARCH"
    done
  fi
  echo
  echo
  echo -e "$(po_getmsg "Containers:")"
  echo -e "$(po_getmsg "Type:Name")"
  echo -e "================"
  if [[ -e $PREFIX/etc/container/proot ]]; then
    for CONTAINER in $(ls $PREFIX/etc/container/proot); do
      NAME=${CONTAINER#container-}
      NAME=${NAME%%.conf}
      echo "proot:$NAME"
    done
  fi
  if [[ -e $PREFIX/etc/container/chroot ]]; then
    for CONTAINER in $(ls $PREFIX/etc/container/chroot); do
      NAME=${CONTAINER#container-}
      NAME=${NAME%%.conf}
      echo "chroot:$NAME"
    done
  fi
  echo
}
# XXX
function export_container() {
  CONTAINER_NAME=$1
  if [[ -e $PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf ]]; then
    export TYPE=proot
    source $PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf
  elif [[ -e $PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf ]]; then
    export TYPE=chroot
    if [[ $(whoami) != "root" ]]; then
      sudo container -e EXPORT_CONTAINER ${CONTAINER_NAME}
      return
    fi
  else
    echo -e "\033[31m$(po_getmsg "Error: container does not exist !")${COLOR}"
    return
  fi
  FILE=/sdcard/${OS}-${CPU_ARCH}-${CROSS_ARCH}-${CONTAINER_NAME}-$(date +%y%m%d%H%M%S).tar.xz
  if ! cd ${CONTAINER_DIR}; then
    echo -e "\033[31m$(po_getmsg "Error: container directory does not exist !")${COLOR}"
    return
  fi
  printf "${COLOR}"
  if [[ ${TYPE} == "chroot" ]]; then
    tar -JPpcvf ${FILE} .
  else
    proot -l tar -JPpcvf ${FILE} .
  fi
  echo -e "$(po_getmsg "Export done, file:") ${FILE}"
}
function import_rootfs() {
  FILE=$1
  if [[ ! -e ${FILE} ]]; then
    echo -e "\033[31m$(po_getmsg "Error: rootfs file does not exist !")${COLOR}"
    return 1
  fi
  while :; do
    read -p "[] OS > " OS
    if [[ ${OS} != "" ]]; then
      break
    fi
  done
  while :; do
    read -p "[] Arch > " CPU_ARCH
    case $CPU_ARCH in
    "i386" | "m68k" | "ppc" | "riscv32" | "riscv64" | "arm64" | "armhf" | "ppc64" | "amd64") break ;;
    esac
  done
  while :; do
    read -p "[] Version > " VERSION
    if [[ ${VERSION} != "" ]] && [[ ! -e $PREFIX/var/container/${OS}-${VERSION}-${CPU_ARCH}.tar.xz ]]; then
      break
    else
      echo -e "\033[31m$(po_getmsg "Error: OS version already in use !")${COLOR}"
    fi
  done
  cp ${FILE} $PREFIX/var/container/${OS}-${VERSION}-${CPU_ARCH}.tar.xz
}
# Maybe it seems to be stupid.
# But it provides an interface for executing built-in functions easily.
function exec_function() {
  $@
}
# Parse command from container-console.
function container_console_main() {
  case $1 in
  "help") console_help ;;
  "search") search_images $2 $3 ;;
  "login") run_container $2 ;;
  "pull") pull_rootfs $2 $3 $4 ;;
  "import") import_rootfs $2 ;;
  "export") export_container $2 ;;
  "new") create_new_container ;;
  "ls") container_list ;;
  "exit") echo -e "\nExit.\033[0m" && exit ;;
  "rmi") remove_image $2 $3 $4 ;;
  "rm") remove_container $2 ;;
  "cp") container_cp $2 $3 ;;
  "info") show_info ;;
  "") return ;;
  *)
    RANDOM_NUM=$RANDOM
    RANDOM_NUM=$(((RANDOM_NUM % 6)))
    case $RANDOM_NUM in
    "1")
      x=${CAT2}
      ;;
    "2")
      x=${CAT3}
      ;;
    "3")
      x=${CAT4}
      ;;
    "4")
      x=${CAT5}
      ;;
    "5")
      x=${CAT6}
      ;;
    "0")
      x=${CAT7}
      ;;
    esac
    printf "$x\n"
    echo -e "\033[31m$(po_getmsg "Error: Unknow command \`$@\`,type \`help\` to show helps.")\033[0m${COLOR}"
    ;;
  esac
}
function container_console() {
  # It has been rewritten with C.
  container-console --greetings
  x="${CAT8}\nBye, nya~"
  printf "$x\n"
}
function remove_container() {
  CONTAINER_NAME=$1
  if [[ -e $PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf ]]; then
    source $PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf
    echo -e "${COLOR}======================================="
    echo -e "$(po_getmsg "Name")                : ${CONTAINER_NAME}"
    echo -e "$(po_getmsg "OS")                  : ${OS}"
    echo -e "$(po_getmsg "TYPE")                : proot"
    echo -e "$(po_getmsg "Container directory") : ${CONTAINER_DIR}"
    echo
    read -p "$(po_getmsg "Press Enter to remove this container or CTRL-C to exit.")"
    chmod -Rv 777 ${CONTAINER_DIR}
    rm -rfv ${CONTAINER_DIR}
    rm -v $PREFIX/etc/container/proot/container-${CONTAINER_NAME}.conf
  elif [[ -e $PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf ]]; then
    source $PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf
    if [[ $(whoami) != "root" ]]; then
      sudo container -e REMOVE_CONTAINER $1
      return
    fi
    source $PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf
    echo -e "======================================="
    echo -e "$(po_getmsg "Name")                : ${CONTAINER_NAME}"
    echo -e "$(po_getmsg "OS")                  : ${OS}"
    echo -e "$(po_getmsg "TYPE")                : chroot"
    echo -e "$(po_getmsg "Container directory") : ${CONTAINER_DIR}"
    echo
    read -p "$(po_getmsg "Press Enter to remove this container or CTRL-C to exit.")"
    for i in {0..10}; do
      umount -lvf ${CONTAINER_DIR}/dev >>/dev/null 2>&1
      umount -lvf ${CONTAINER_DIR}/sys >>/dev/null 2>&1
      umount -lvf ${CONTAINER_DIR}/proc >>/dev/null 2>&1
      umount ${CONTAINER_DIR}/sdcard >>/dev/null 2>&1
      umount ${CONTAINER_DIR}/tmp >>/dev/null 2>&1
      umount -lvf ${CONTAINER_DIR} >>/dev/null 2>&1
    done
    if mountpoint -q ${CONTAINER_DIR}/sdcard; then
      echo -e "\033[31m$(po_getmsg "Error: can not umount container at this time !")${COLOR}"
      return 1
    fi
    if mountpoint -q ${CONTAINER_DIR}/tmp; then
      echo -e "\033[31m$(po_getmsg "Error: can not umount container at this time !")${COLOR}"
      return 1
    fi
    if mountpoint -q ${CONTAINER_DIR}/dev; then
      echo -e "\033[31m$(po_getmsg "Error: can not umount container at this time !")${COLOR}"
      return 1
    fi
    if mountpoint -q ${CONTAINER_DIR}/sys; then
      echo -e "\033[31m$(po_getmsg "Error: can not umount container at this time !")${COLOR}"
      return 1
    fi
    if mountpoint -q ${CONTAINER_DIR}/proc; then
      echo -e "\033[31m$(po_getmsg "Error: can not umount container at this time !")${COLOR}"
      return 1
    fi
    rm -rvf ${CONTAINER_DIR}
    rm -v $PREFIX/etc/container/chroot/container-${CONTAINER_NAME}.conf
  else
    echo -e "\033[31m$(po_getmsg "Error: container does not exist !")${COLOR}"
    return
  fi
}
function script_help() {
  col=$(($(($(stty size | awk '{print $2}'))) / 2 - 25))
  logo="\033[1;38;2;254;228;208m
\033[${col}G         ●●●●● ●●●●● ●●●●  ●   ● ●   ● ●   ●
\033[${col}G           ●   ●     ●   ● ●● ●● ●   ●  ● ●
\033[${col}G           ●   ●●●●  ●●●●  ● ● ● ●   ●   ●
\033[${col}G           ●   ●     ●  ●  ●   ● ●   ●  ● ●
\033[${col}G           ●   ●●●●● ●   ● ●   ●  ●●●  ●   ●



\033[${col}G ●●●   ●●●  ●   ● ●●●●●   ●    ●●●  ●   ● ●●●●● ●●●●
\033[${col}G●   ● ●   ● ●●  ●   ●    ● ●    ●   ●●  ● ●     ●   ●
\033[${col}G●     ●   ● ● ● ●   ●   ●   ●   ●   ● ● ● ●●●●  ●●●●
\033[${col}G●   ● ●   ● ●  ●●   ●   ●●●●●   ●   ●  ●● ●     ●  ●
\033[${col}G ●●●   ●●●  ●   ●   ●   ●   ●  ●●●  ●   ● ●●●●● ●   ●

"
  printf "$logo"
  SIZE=$(stty size | awk '{print $2}')
  let SIZE=$(($SIZE - 16))
  echo "//"
  echo
  echo -e "\e[30;1;48;2;254;228;208;38;2;0;0;0mTERMUX-CONTAINER$(yes " " | sed $SIZE'q' | tr -d '\n')\033[0m"
  echo
  echo -e "${COLOR}//"
  echo
  echo -e "$(po_getmsg "Usage:")"
  echo -e " $(po_getmsg "container                       #Start container console.")"
  echo -e " $(po_getmsg "container -h                    #Show this page.")"
  echo -e " $(po_getmsg "container cp [Name:Path] [Path] #Copy files,like docker cp.")"
  echo -e " $(po_getmsg "container -i [Image File]       #Import an image.")"
  echo -e " $(po_getmsg "container -E                    #Easy mode.")"
  echo -e " $(po_getmsg "container -e [Function]         #Exec function in this script *NOT for user.")"
}
##############
##TODO
##Easy_register
function easy_create() {
  trap "exit" SIGINT
  WIDTH=$(($(stty size | awk '{print $2}') - 8))
  if whiptail --title "[] $(po_getmsg "RUN MODE")" --yes-button "chroot" --no-button "proot" --yesno "$(po_getmsg "if your phone is rooted,it is recommand to run container with chroot mode")\n$(po_getmsg "If not ,please choose proot")\n\n$(po_getmsg "Please choose your run mode:")" 12 $WIDTH; then
    TYPE=chroot
  else
    TYPE=proot
  fi
  LIST="1 alpine 2 archlinux 3 centos 4 debian 5 fedora 6 kali 7 manjaro 8 opensuse 9 parrot 10 ubuntu"
  LIST2="alpine archlinux centos debian fedora kali manjaro opensuse parrot ubuntu"
  NUMBER=$(whiptail --title "[] $(po_getmsg "OS")" --menu "$(po_getmsg "Choose the OS to install:")" 15 $WIDTH 6 $LIST 3>&1 1>&2 2>&3)
  OS=$(echo $LIST2 | awk "{print \$$NUMBER}")
  unset LIST LIST2 NUMBER
  if [[ ${OS} != "parrot" ]] && [[ ${OS} != "manjaro" ]]; then
    NUMBER=0
    for VERSION in $(curl -sL http://images.linuxcontainers.org/images/$OS | grep "href" | sed -E 's@<a (href)@\n\1@g' | awk -F 'href=' '{print $2}' | cut -d '"' -f 2 | cut -d "/" -f 1 | grep -v '\.\.'); do
      NUMBER=$(($NUMBER + 1))
      LIST+="$NUMBER $VERSION "
      LIST2+="$VERSION "
    done
    unset VERSION NUMBER
    NUMBER=$(whiptail --title "[] $(po_getmsg "VERSION")" --menu "$(po_getmsg "Choose the version to install:")" 15 $WIDTH 6 $LIST 3>&1 1>&2 2>&3)
    VERSION=$(echo $LIST2 | awk "{print \$$NUMBER}")
  fi
  GET_CPU_ARCH
  if [[ ! -e $PREFIX/var/container/${OS}-${VERSION}-${CPU_ARCH}.tar.xz ]]; then
    PULL_ROOTFS ${OS} ${VERSION} ${CPU_ARCH}
  fi
  if [[ -e /data/data/com.termux/files/home/${TYPE}-${OS}-${VERSION}_${CPU_ARCH} ]]; then
    echo -e "$(po_getmsg "Error: container already installed")"
    return 1
  fi
  if [[ ${TYPE} == "chroot" ]]; then
    [[ -e $PREFIX/etc/container/chroot ]] || mkdir -p $PREFIX/etc/container/chroot
    echo -e "#This file was automatically created by termux-container.\n#Do not edit this file if you don't know what you are doing !" >>$PREFIX/etc/container/chroot/container-${TYPE}-${OS}-${VERSION}_${CPU_ARCH}.conf
    echo -e "OS=${OS}\nCONTAINER_DIR=/data/data/com.termux/files/home/${TYPE}-${OS}-${VERSION}_${CPU_ARCH}\nENABLE_UNSHARE=${ENABLE_UNSHARE}\nPRIVAGE_LEVEL=1\nCROSS_ARCH=null\nMOUNT_SDCARD=${MOUNT_SDCARD}" >>$PREFIX/etc/container/chroot/container-${TYPE}-${OS}-${VERSION}_${CPU_ARCH}.conf
    sudo container -e CREATE_CHROOT_CONTAINER ${OS}-${VERSION}-${CPU_ARCH}.tar.xz /data/data/com.termux/files/home/${TYPE}-${OS}-${VERSION}_${CPU_ARCH}
  else
    export CROSSARCH=null
    CREATE_PROOT_CONTAINER ${OS}-${VERSION}-${CPU_ARCH}.tar.xz /data/data/com.termux/files/home/${TYPE}-${OS}-${VERSION}_${CPU_ARCH} ${CROSS_ARCH}
    [[ -e $PREFIX/etc/container/proot ]] || mkdir -p $PREFIX/etc/container/proot
    echo -e "#This file was automatically created by termux-container.\n#Do not edit this file if you don't know what you are doing !" >>$PREFIX/etc/container/proot/container-${TYPE}-${OS}-${VERSION}_${CPU_ARCH}.conf
    echo -e "OS=${OS}\nCONTAINER_DIR=/data/data/com.termux/files/home/${TYPE}-${OS}-${VERSION}_${CPU_ARCH}\nCROSS_ARCH=${CROSSARCH}\nMOUNT_SDCARD=${MOUNT_SDCARD}" >>$PREFIX/etc/container/proot/container-${TYPE}-${OS}-${VERSION}_${CPU_ARCH}.conf
  fi
}
function easy_remove() {
  trap "exit" SIGINT
  WIDTH=$(($(stty size | awk '{print $2}') - 8))
  NUMBER=0
  if [[ -e $PREFIX/etc/container/proot ]]; then
    for CONTAINER in $(ls $PREFIX/etc/container/proot); do
      NAME=${CONTAINER#container-}
      NAME=${NAME%%.conf}
      NUMBER=$(($NUMBER + 1))
      LIST+="$NUMBER $NAME(proot) "
      LIST2+="$NAME "
    done
  fi
  if [[ -e $PREFIX/etc/container/chroot ]]; then
    for CONTAINER in $(ls $PREFIX/etc/container/chroot); do
      NAME=${CONTAINER#container-}
      NAME=${NAME%%.conf}
      NUMBER=$(($NUMBER + 1))
      LIST+="$NUMBER $NAME(chroot) "
      LIST2+="$NAME "
    done
  fi
  unset CONTAINER NUMBER
  if [[ $LIST == "" ]]; then
    whiptail --title "[] $(po_getmsg "ERROR")" --msgbox "$(po_getmsg "No container created!")" 7 $WIDTH
    return 1
  fi
  NUMBER=$(whiptail --title "[] CONTAINER" --menu "$(po_getmsg "Choose the container to remove:")" 15 $WIDTH 6 $LIST 3>&1 1>&2 2>&3)
  CONTAINER=$(echo $LIST2 | awk "{print \$$NUMBER}")
  REMOVE_CONTAINER "$CONTAINER"
}
function easy_run() {
  trap "exit" SIGINT
  WIDTH=$(($(stty size | awk '{print $2}') - 8))
  NUMBER=0
  if [[ -e $PREFIX/etc/container/proot ]]; then
    for CONTAINER in $(ls $PREFIX/etc/container/proot); do
      NAME=${CONTAINER#container-}
      NAME=${NAME%%.conf}
      NUMBER=$(($NUMBER + 1))
      LIST+="$NUMBER $NAME(proot) "
      LIST2+="$NAME "
    done
  fi
  if [[ -e $PREFIX/etc/container/chroot ]]; then
    for CONTAINER in $(ls $PREFIX/etc/container/chroot); do
      NAME=${CONTAINER#container-}
      NAME=${NAME%%.conf}
      NUMBER=$(($NUMBER + 1))
      LIST+="$NUMBER $NAME(chroot) "
      LIST2+="$NAME "
    done
  fi
  unset CONTAINER NUMBER
  if [[ $LIST == "" ]]; then
    whiptail --title "[] $(po_getmsg "ERROR")" --msgbox "$(po_getmsg "No container created!")" 7 $WIDTH
    return 1
  fi
  NUMBER=$(whiptail --title "[] CONTAINER" --menu "$(po_getmsg "Choose the container to run:")" 15 $WIDTH 6 $LIST 3>&1 1>&2 2>&3)
  CONTAINER=$(echo $LIST2 | awk "{print \$$NUMBER}")
  export BE_SILENT=true
  RUN_CONTAINER $CONTAINER
}
function easy_backup() {
  trap "exit" SIGINT
  WIDTH=$(($(stty size | awk '{print $2}') - 8))
  NUMBER=0
  if [[ -e $PREFIX/etc/container/proot ]]; then
    for CONTAINER in $(ls $PREFIX/etc/container/proot); do
      NAME=${CONTAINER#container-}
      NAME=${NAME%%.conf}
      NUMBER=$(($NUMBER + 1))
      LIST+="$NUMBER $NAME(proot) "
      LIST2+="$NAME "
    done
  fi
  if [[ -e $PREFIX/etc/container/chroot ]]; then
    for CONTAINER in $(ls $PREFIX/etc/container/chroot); do
      NAME=${CONTAINER#container-}
      NAME=${NAME%%.conf}
      NUMBER=$(($NUMBER + 1))
      LIST+="$NUMBER $NAME(chroot) "
      LIST2+="$NAME "
    done
  fi
  unset CONTAINER NUMBER
  if [[ $LIST == "" ]]; then
    whiptail --title "[] $(po_getmsg "ERROR")" --msgbox "$(po_getmsg "No container created!")" 7 $WIDTH
    return 1
  fi
  NUMBER=$(whiptail --title "[] CONTAINER" --menu "$(po_getmsg "Choose the container to backup:")" 15 $WIDTH 6 $LIST 3>&1 1>&2 2>&3)
  CONTAINER=$(echo $LIST2 | awk "{print \$$NUMBER}")
  EXPORT_CONTAINER $CONTAINER
}

function easy_restore() {
  #TODO
  return 0
}
function easy_mode() {
  trap "exit" SIGINT
  WIDTH=$(($(stty size | awk '{print $2}') - 8))
  OPTION=$(whiptail --title "[] TERMUX-CONTAINER" --menu "$(po_getmsg "Choose an operation:")" 15 $WIDTH 6 1 "$(po_getmsg "install")" 2 "$(po_getmsg "remove")" 3 "$(po_getmsg "run")" 3>&1 1>&2 2>&3)
  case $OPTION in
  1) EASY_INSTALL ;;
  2) EASY_REMOVE ;;
  3) EASY_RUN ;;
  esac
}
# I think a large script should includes a main function...
function main() {
  case $1 in
  "-h") script_help ;;
  "-E") easy_mode ;;
  "-e") exec_function ${@:2} ;;
  "cp") container_cp $2 $3 ;;
  # Invalid option, just to check if termux-container exists.
  "-t") exit 0 ;;
  "") container_console ;;
  *) container_console_main ${@:1} ;;
  esac
}
_init
main "$@"
#  ██╗ ██╗  ███████╗   ████╗   ███████╗
# ████████╗ ██╔════╝ ██╔═══██╗ ██╔════╝
# ╚██╔═██╔╝ █████╗   ██║   ██║ █████╗
# ████████╗ ██╔══╝   ██║   ██║ ██╔══╝
# ╚██╔═██╔╝ ███████╗ ╚██████╔╝ ██║
#  ╚═╝ ╚═╝  ╚══════╝  ╚═════╝  ╚═╝
